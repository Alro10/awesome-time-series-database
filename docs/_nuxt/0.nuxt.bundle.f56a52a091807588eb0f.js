webpackJsonp([0],{133:function(e,a,t){function s(e){t(146)}var i=t(17)(t(139),t(143),s,null,null);e.exports=i.exports},135:function(e,a,t){var s=t(136).default,i={OpenTSDB:s,KairosDB:{url:"https://kairosdb.github.io/",description:"Fast Time Series Database on Cassandra",language:"Java",backends:["Cassandra"]},Heroic:{url:"https://spotify.github.io/heroic/",description:"Scalable time series database based on Bigtable, Cassandra, and Elasticsearch",language:"Java",backends:["Cassandra","HBase","Bigtable","Elasticsearch"],links:{"Monitoring at Spotify - Introducing Heroic":"https://labs.spotify.com/2015/11/17/monitoring-at-spotify-introducing-heroic/"}},BTrDB:{url:"https://github.com/SoftwareDefinedBuildings/btrdb",aka:"Berkeley Tree Database",description:"High performance time series database designed to support high density data storage applications.",language:"Go",backends:["Ceph"],links:{"BTrDB: Optimizing Storage System Design for Timeseries Processing":"https://www.usenix.org/system/files/conference/fast16/fast16-papers-andersen.pdf"}},Vaultaire:{url:"https://github.com/afcowie/vaultaire",description:"data vault for system metrics, backed onto Ceph",language:"Haskell",backends:["Ceph"],links:{"Design and compare vaulataire with other time series database":"http://www.anchor.com.au/blog/2014/06/vaultaire-ceph-based-immutable-tsdb/"}},InfluxDB:{url:"https://www.influxdata.com/time-series-platform/influxdb/",description:"Scalable datastore for metrics, events, and real-time analytics https://influxdata.com",language:"Go",backends:["Custom"],tags:["LSM Tree"],links:{"InfluxDB Markedly Outperforms OpenTSDB in Time-Series Data & Metrics Benchmark":"https://influxdata.com/influxdb-markedly-outperforms-opentsdb-in-time-series-data-metrics-benchmark/"}},Prometheus:{url:"https://prometheus.io/",description:"systems and service monitoring system and time series database featuring pull model, alert, graph etc.",language:"Go",backends:["Custom"],links:{"Scaling and Federating Prometheus":"https://www.robustperception.io/scaling-and-federating-prometheus/"}},Beringei:{url:"https://github.com/facebookincubator/beringei",description:"A high performance, in memory time series storage engine designed by Facebook",language:"C++",backends:["Memory"]},Atlas:{url:"https://github.com/Netflix/atlas",description:"In-memory dimensional time series database designed at Netflix",language:"Scala",backends:["Memory"]},Khronus:{url:"https://github.com/Searchlight/khronus",description:"distributed and reactive time series database designed to store, retrieve, analyze and process a large amount of custom metrics",language:"Scala",backends:["Cassandra"]},"Hawkular Metrics":{url:"https://github.com/hawkular/hawkular-metrics",description:"storage engine for metric data using Cassandra",language:"Java",backends:["Cassandra"]},Blueflood:{url:"https://github.com/rackerlabs/blueflood",description:"distributed system designed to ingest and process time series data built by rackspace",language:"Java",backends:["Cassandra","Elasticsearch"]},Newts:{url:"https://github.com/OpenNMS/newts",description:"a time-series data store support searching metadata",language:"Java",backends:["Cassandra"]},Akumuli:{url:"https://github.com/akumuli/Akumuli",description:"a numeric time series database that can be used to capture, store and process time-series data in real-time.",language:"C++",backends:["Custom"],tags:["LSM Tree"],links:{"Akumuli Markedly Outperforms InfluxDB in Time-Series Data & Metrics Benchmark":"http://akumuli.org/akumuli/2017/01/24/benchmark/"}}};Object.defineProperty(a,"__esModule",{value:!0}),a.default=i},136:function(e,a){var t={name:"OpenTSDB",url:"http://opentsdb.net/",description:"Classical time series database on top of HBase. Now support Cassandra and Bigtable.",language:"Java",backends:["HBase","Bigtable","Cassandra"]};Object.defineProperty(a,"__esModule",{value:!0}),a.default=t},139:function(e,a,t){"use strict";Object.defineProperty(a,"__esModule",{value:!0});var s=t(135),i=t.n(s);a.default={data:function(){return{greeting:"Welcome to your Vue.js app!",tsdbs:i.a,originalTsdbs:i.a,languages:["Java","C++","Go","Scala","Haskell"],lang:"All"}},watch:{lang:function(e){if(console.log("newLang",e),"All"===e)return void(this.tsdbs=this.originalTsdbs);var a={};for(var t in this.originalTsdbs)this.originalTsdbs.hasOwnProperty(t)&&e===this.originalTsdbs[t].language&&(a[t]=this.originalTsdbs[t]);this.tsdbs=a}}}},140:function(e,a,t){a=e.exports=t(43)(!0),a.push([e.i,"","",{version:3,sources:[],names:[],mappings:"",file:"index.vue",sourceRoot:""}])},143:function(e,a){e.exports={render:function(){var e=this,a=e.$createElement,t=e._self._c||a;return t("div",{staticClass:"ui container"},[t("h1",[e._v("Awesome Time Series Database")]),t("div",[t("select",{directives:[{name:"model",rawName:"v-model",value:e.lang,expression:"lang"}],staticClass:"ui selection dropdown",on:{change:function(a){var t=Array.prototype.filter.call(a.target.options,function(e){return e.selected}).map(function(e){return"_value"in e?e._value:e.value});e.lang=a.target.multiple?t:t[0]}}},[t("option",{attrs:{value:"All"}},[e._v("All")]),e._l(e.languages,function(a,s){return t("option",{key:s,domProps:{value:a}},[e._v(e._s(a))])})],2)]),t("table",{staticClass:"ui celled table"},[e._m(0),t("tbody",e._l(e.tsdbs,function(a,s){return t("tr",{key:s},[t("td",[t("nuxt-link",{attrs:{to:"db/"+s}},[e._v(e._s(s))])],1),t("td",[t("a",{attrs:{href:a.url,target:"_blank"}},[e._v("\n                "+e._s(a.url)+"\n        ")])]),t("td",[e._v(e._s(a.description))]),t("td",[e._v(e._s(a.language))])])}))])])},staticRenderFns:[function(){var e=this,a=e.$createElement,t=e._self._c||a;return t("thead",[t("tr",[t("th",[e._v("Name")]),t("th",[e._v("Website")]),t("th",[e._v("Description")]),t("th",[e._v("Language")])])])}]}},146:function(e,a,t){var s=t(140);"string"==typeof s&&(s=[[e.i,s,""]]),s.locals&&(e.exports=s.locals);t(44)("8352576c",s,!0)}});